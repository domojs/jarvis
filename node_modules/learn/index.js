var provider={
	'actions':{'giveup':['non', 'laisse tomber', 'oublie'], 'over':['c\'est tout', ' fini']}
}

exports.init=function(config, app)
{
	$('fs').exists(config, function(exists){
		if(!exists)
			$('fs').writeFile(config, '{}', function(error){
				if(error)
					console.log(error);
			});
	});
	
	commands=$(config);
	
	var lastCmd=null;
	
	app.use(function(cmd, context, fileName, callback, next){
		callback(null, 'je n\'ai pas compris, peux-tu m\'apprendre ce que Ã§a veut dire ?');
		context.provider=provider;
		lastCmd=cmd;
		cmd.count=0;
	});
	
	provider.understand=function(cmd, context){
		cmd.action=this.findInfo(this, 'actions', cmd.text);
		return context.provider==this || typeof(commands[cmd.text])!='undefined';
	};
	
	provider.process=function(cmd, context, callback, next){
		switch(cmd.action)
		{
			case 'giveup':
				context.provider=null;
				if(lastCmd!=null && lastCmd.count>0 && commands[lastCmd.text] && commands[lastCmd.text].length>0)
				{
					$('fs').writeFile(config, JSON.stringify(commands), function(error)
					{
						callback(error, 'Ok, bien recu');
					});
				}
				else
					callback(null, 'tant pis');
				lastCmd=null;
				return true;
			default:
				if(lastCmd!=null)
				{
					if(lastCmd.count==0)
						commands[lastCmd.text]=[];

					commands[lastCmd.text].push(cmd.text);
					lastCmd.count++;
					callback(null, 'autre chose ?');
				}
				else
				{
					$.eachAsync(commands[cmd.text], function(index, text, next){
						global.eval(text, context, null, function(error, result){
							if(error)
								callback('Error on '+text+'\n'+error);
							else
								next();
						});
					}, function(){
					    callback(null, 'C\'est fait.');
					});
				}
				return true;
		}
	};
	
	$.language(provider);
};


