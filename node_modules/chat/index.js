var debug=require('debug')('chat');

var providers=[];

var Provider={
findInfo:function findInfo(provider, collection, text)
{
	debug(collection);
	if(provider[collection])
	{
		for(var item in provider[collection])
		{
			debug(item);
			for(var syno in provider[collection][item])
			{
				debug(provider[collection][item][syno]);
				if(text.indexOf(provider[collection][item][syno])>=0)
					return item;
			}
		}
	}
},

understand:function understand(cmd, context)
{
	cmd.action=this.findInfo(this, 'actions', cmd.text);
	debug('action: ' + cmd.action);
	cmd.target=this.findInfo(this, 'keywords', cmd.text);
	debug('keywords: ' + cmd.target);
	cmd.other=this.findInfo(this, 'others', cmd.text);
	debug('other: ' + cmd.other);
	return cmd.target;
}
};

function applyProvider(cmd, provider, context, callback, next)
{
	return (provider.understand(cmd, context, next) || false) && provider.process(cmd, context, callback, next);
}

exports.init=function(config,app){
	app.chat=function(cmd, context, fileName, callback, next){
		var done=false;
		if(context.provider!=null)
		{
			if(!applyProvider(cmd, context.provider, context, callback, next))
			{
				console.log('pwet');
				return next('there was not really an error, but the previous provider was not unregistered and could not understand this command');
			}
			done=true;
		}
		else
		{
			for(var p in providers)
			{
				if(applyProvider(cmd,providers[p],context,callback, next)===false)
					continue;
				done=true;
				break;
			}
			
			if(!done)
			{
				next();
			}
		}
	};
	app.use(app.chat);
}

$.extend($, {language:function(provider){
	if($.isPlainObject(provider))
	{
		provider.__proto__=provider.prototype=Provider;
		return providers.push(provider);
	}
	
	var callback=function(command){
		provider.emit('chat', command);
	};
	
	return function(text){
		module.exports(text,callback);
	}
}});