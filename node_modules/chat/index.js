var debug=require('debug')('chat');

var providers=[];

var Provider={
findInfo:function findInfo(provider, collection, text)
{
	debug(collection);
	if(provider[collection])
	{
		for(var item in provider[collection])
		{
			debug(item);
			for(var syno in provider[collection][item])
			{
				debug(provider[collection][item][syno]);
				if(text.indexOf(provider[collection][item][syno])>=0)
					return item;
			}
		}
	}
},

understand:function understand(cmd, next)
{
	cmd.action=this.findInfo(this, 'actions', cmd.text);
	debug('action: ' + cmd.action);
	cmd.target=this.findInfo(this, 'keywords', cmd.text);
	debug('keywords: ' + cmd.target);
	cmd.other=this.findInfo(this, 'others', cmd.text);
	debug('other: ' + cmd.other);
	return cmd.target;
}
};

exports.init=function(config,app){
	app.use(function(cmd, context, fileName, callback, next){
	var done=false;
	for(var p in providers)
	{
		var provider=providers[p];
		context.provider=provider;
		if(provider.understand(cmd, next))
		{
			if(provider.process(cmd,callback,next)===false)
				continue;
			done=true;
			break;
		}
	}
	
	if(!done)
	{
		if(cmd.action)
			callback($('util').inspect(cmd), 'je veux bien, mais je ne sais pas ce que câ€™est.');
		else
			callback('hein ?');

	}
});
}

$.extend($, {language:function(provider){
	if($.isPlainObject(provider))
	{
		provider.__proto__=provider.prototype=Provider;
		return providers.push(provider);
	}
	
	var callback=function(command){
		provider.emit('chat', command);
	};
	
	return function(text){
		module.exports(text,callback);
	}
}});